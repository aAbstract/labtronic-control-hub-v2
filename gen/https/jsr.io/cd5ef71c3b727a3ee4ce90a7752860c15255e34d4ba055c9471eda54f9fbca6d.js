// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
// This module is browser compatible.
import { AssertionError } from "./assertion_error.ts";
import { assertIsError } from "./is_error.ts";
export async function assertRejects(fn, errorClassOrMsg, msgIncludesOrMsg, msg) {
  // deno-lint-ignore no-explicit-any
  let ErrorClass;
  let msgIncludes;
  let err;
  if (typeof errorClassOrMsg !== "string") {
    if (errorClassOrMsg === undefined || errorClassOrMsg.prototype instanceof Error || errorClassOrMsg.prototype === Error.prototype) {
      ErrorClass = errorClassOrMsg;
      msgIncludes = msgIncludesOrMsg;
    }
  } else {
    msg = errorClassOrMsg;
  }
  let doesThrow = false;
  let isPromiseReturned = false;
  const msgSuffix = msg ? `: ${msg}` : ".";
  try {
    const possiblePromise = fn();
    if (possiblePromise && typeof possiblePromise === "object" && typeof possiblePromise.then === "function") {
      isPromiseReturned = true;
      await possiblePromise;
    } else {
      throw new Error();
    }
  } catch (error) {
    if (!isPromiseReturned) {
      throw new AssertionError(`Function throws when expected to reject${msgSuffix}`);
    }
    if (ErrorClass) {
      if (!(error instanceof Error)) {
        throw new AssertionError(`A non-Error object was rejected${msgSuffix}`);
      }
      assertIsError(error, ErrorClass, msgIncludes, msg);
    }
    err = error;
    doesThrow = true;
  }
  if (!doesThrow) {
    throw new AssertionError(`Expected function to reject${msgSuffix}`);
  }
  return err;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vanNyLmlvL0BzdGQvYXNzZXJ0LzEuMC42L3JlamVjdHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyNCB0aGUgRGVubyBhdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLiBNSVQgbGljZW5zZS5cbi8vIFRoaXMgbW9kdWxlIGlzIGJyb3dzZXIgY29tcGF0aWJsZS5cbmltcG9ydCB7IEFzc2VydGlvbkVycm9yIH0gZnJvbSBcIi4vYXNzZXJ0aW9uX2Vycm9yLnRzXCI7XG5pbXBvcnQgeyBhc3NlcnRJc0Vycm9yIH0gZnJvbSBcIi4vaXNfZXJyb3IudHNcIjtcblxuLyoqXG4gKiBFeGVjdXRlcyBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYSBwcm9taXNlLCBleHBlY3RpbmcgaXQgdG8gcmVqZWN0LlxuICpcbiAqIFRvIGFzc2VydCB0aGF0IGEgc3luY2hyb25vdXMgZnVuY3Rpb24gdGhyb3dzLCB1c2Uge0BsaW5rY29kZSBhc3NlcnRUaHJvd3N9LlxuICpcbiAqIEBleGFtcGxlIFVzYWdlXG4gKiBgYGB0cyBpZ25vcmVcbiAqIGltcG9ydCB7IGFzc2VydFJlamVjdHMgfSBmcm9tIFwiQHN0ZC9hc3NlcnRcIjtcbiAqXG4gKiBhd2FpdCBhc3NlcnRSZWplY3RzKGFzeW5jICgpID0+IFByb21pc2UucmVqZWN0KG5ldyBFcnJvcigpKSk7IC8vIERvZXNuJ3QgdGhyb3dcbiAqIGF3YWl0IGFzc2VydFJlamVjdHMoYXN5bmMgKCkgPT4gY29uc29sZS5sb2coXCJIZWxsbyB3b3JsZFwiKSk7IC8vIFRocm93c1xuICogYGBgXG4gKlxuICogQHBhcmFtIGZuIFRoZSBmdW5jdGlvbiB0byBleGVjdXRlLlxuICogQHBhcmFtIG1zZyBUaGUgb3B0aW9uYWwgbWVzc2FnZSB0byBkaXNwbGF5IGlmIHRoZSBhc3NlcnRpb24gZmFpbHMuXG4gKiBAcmV0dXJucyBUaGUgcHJvbWlzZSB3aGljaCByZXNvbHZlcyB0byB0aGUgdGhyb3duIGVycm9yLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0UmVqZWN0cyhcbiAgZm46ICgpID0+IFByb21pc2VMaWtlPHVua25vd24+LFxuICBtc2c/OiBzdHJpbmcsXG4pOiBQcm9taXNlPHVua25vd24+O1xuLyoqXG4gKiBFeGVjdXRlcyBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYSBwcm9taXNlLCBleHBlY3RpbmcgaXQgdG8gcmVqZWN0LlxuICogSWYgaXQgZG9lcyBub3QsIHRoZW4gaXQgdGhyb3dzLiBBbiBlcnJvciBjbGFzcyBhbmQgYSBzdHJpbmcgdGhhdCBzaG91bGQgYmVcbiAqIGluY2x1ZGVkIGluIHRoZSBlcnJvciBtZXNzYWdlIGNhbiBhbHNvIGJlIGFzc2VydGVkLlxuICpcbiAqIFRvIGFzc2VydCB0aGF0IGEgc3luY2hyb25vdXMgZnVuY3Rpb24gdGhyb3dzLCB1c2Uge0BsaW5rY29kZSBhc3NlcnRUaHJvd3N9LlxuICpcbiAqIEBleGFtcGxlIFVzYWdlXG4gKiBgYGB0cyBpZ25vcmVcbiAqIGltcG9ydCB7IGFzc2VydFJlamVjdHMgfSBmcm9tIFwiQHN0ZC9hc3NlcnRcIjtcbiAqXG4gKiBhd2FpdCBhc3NlcnRSZWplY3RzKGFzeW5jICgpID0+IFByb21pc2UucmVqZWN0KG5ldyBFcnJvcigpKSwgRXJyb3IpOyAvLyBEb2Vzbid0IHRocm93XG4gKiBhd2FpdCBhc3NlcnRSZWplY3RzKGFzeW5jICgpID0+IFByb21pc2UucmVqZWN0KG5ldyBFcnJvcigpKSwgU3ludGF4RXJyb3IpOyAvLyBUaHJvd3NcbiAqIGBgYFxuICpcbiAqIEB0eXBlUGFyYW0gRSBUaGUgZXJyb3IgY2xhc3MgdG8gYXNzZXJ0LlxuICogQHBhcmFtIGZuIFRoZSBmdW5jdGlvbiB0byBleGVjdXRlLlxuICogQHBhcmFtIEVycm9yQ2xhc3MgVGhlIGVycm9yIGNsYXNzIHRvIGFzc2VydC5cbiAqIEBwYXJhbSBtc2dJbmNsdWRlcyBUaGUgc3RyaW5nIHRoYXQgc2hvdWxkIGJlIGluY2x1ZGVkIGluIHRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIG1zZyBUaGUgb3B0aW9uYWwgbWVzc2FnZSB0byBkaXNwbGF5IGlmIHRoZSBhc3NlcnRpb24gZmFpbHMuXG4gKiBAcmV0dXJucyBUaGUgcHJvbWlzZSB3aGljaCByZXNvbHZlcyB0byB0aGUgdGhyb3duIGVycm9yLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0UmVqZWN0czxFIGV4dGVuZHMgRXJyb3IgPSBFcnJvcj4oXG4gIGZuOiAoKSA9PiBQcm9taXNlTGlrZTx1bmtub3duPixcbiAgLy8gZGVuby1saW50LWlnbm9yZSBuby1leHBsaWNpdC1hbnlcbiAgRXJyb3JDbGFzczogYWJzdHJhY3QgbmV3ICguLi5hcmdzOiBhbnlbXSkgPT4gRSxcbiAgbXNnSW5jbHVkZXM/OiBzdHJpbmcsXG4gIG1zZz86IHN0cmluZyxcbik6IFByb21pc2U8RT47XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXNzZXJ0UmVqZWN0czxFIGV4dGVuZHMgRXJyb3IgPSBFcnJvcj4oXG4gIGZuOiAoKSA9PiBQcm9taXNlTGlrZTx1bmtub3duPixcbiAgZXJyb3JDbGFzc09yTXNnPzpcbiAgICAvLyBkZW5vLWxpbnQtaWdub3JlIG5vLWV4cGxpY2l0LWFueVxuICAgIHwgKGFic3RyYWN0IG5ldyAoLi4uYXJnczogYW55W10pID0+IEUpXG4gICAgfCBzdHJpbmcsXG4gIG1zZ0luY2x1ZGVzT3JNc2c/OiBzdHJpbmcsXG4gIG1zZz86IHN0cmluZyxcbik6IFByb21pc2U8RSB8IEVycm9yIHwgdW5rbm93bj4ge1xuICAvLyBkZW5vLWxpbnQtaWdub3JlIG5vLWV4cGxpY2l0LWFueVxuICBsZXQgRXJyb3JDbGFzczogKGFic3RyYWN0IG5ldyAoLi4uYXJnczogYW55W10pID0+IEUpIHwgdW5kZWZpbmVkO1xuICBsZXQgbXNnSW5jbHVkZXM6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgbGV0IGVycjtcblxuICBpZiAodHlwZW9mIGVycm9yQ2xhc3NPck1zZyAhPT0gXCJzdHJpbmdcIikge1xuICAgIGlmIChcbiAgICAgIGVycm9yQ2xhc3NPck1zZyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICBlcnJvckNsYXNzT3JNc2cucHJvdG90eXBlIGluc3RhbmNlb2YgRXJyb3IgfHxcbiAgICAgIGVycm9yQ2xhc3NPck1zZy5wcm90b3R5cGUgPT09IEVycm9yLnByb3RvdHlwZVxuICAgICkge1xuICAgICAgRXJyb3JDbGFzcyA9IGVycm9yQ2xhc3NPck1zZztcbiAgICAgIG1zZ0luY2x1ZGVzID0gbXNnSW5jbHVkZXNPck1zZztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbXNnID0gZXJyb3JDbGFzc09yTXNnO1xuICB9XG4gIGxldCBkb2VzVGhyb3cgPSBmYWxzZTtcbiAgbGV0IGlzUHJvbWlzZVJldHVybmVkID0gZmFsc2U7XG4gIGNvbnN0IG1zZ1N1ZmZpeCA9IG1zZyA/IGA6ICR7bXNnfWAgOiBcIi5cIjtcbiAgdHJ5IHtcbiAgICBjb25zdCBwb3NzaWJsZVByb21pc2UgPSBmbigpO1xuICAgIGlmIChcbiAgICAgIHBvc3NpYmxlUHJvbWlzZSAmJlxuICAgICAgdHlwZW9mIHBvc3NpYmxlUHJvbWlzZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgdHlwZW9mIHBvc3NpYmxlUHJvbWlzZS50aGVuID09PSBcImZ1bmN0aW9uXCJcbiAgICApIHtcbiAgICAgIGlzUHJvbWlzZVJldHVybmVkID0gdHJ1ZTtcbiAgICAgIGF3YWl0IHBvc3NpYmxlUHJvbWlzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICghaXNQcm9taXNlUmV0dXJuZWQpIHtcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgICAgYEZ1bmN0aW9uIHRocm93cyB3aGVuIGV4cGVjdGVkIHRvIHJlamVjdCR7bXNnU3VmZml4fWAsXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoRXJyb3JDbGFzcykge1xuICAgICAgaWYgKCEoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKGBBIG5vbi1FcnJvciBvYmplY3Qgd2FzIHJlamVjdGVkJHttc2dTdWZmaXh9YCk7XG4gICAgICB9XG4gICAgICBhc3NlcnRJc0Vycm9yKFxuICAgICAgICBlcnJvcixcbiAgICAgICAgRXJyb3JDbGFzcyxcbiAgICAgICAgbXNnSW5jbHVkZXMsXG4gICAgICAgIG1zZyxcbiAgICAgICk7XG4gICAgfVxuICAgIGVyciA9IGVycm9yO1xuICAgIGRvZXNUaHJvdyA9IHRydWU7XG4gIH1cbiAgaWYgKCFkb2VzVGhyb3cpIHtcbiAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoXG4gICAgICBgRXhwZWN0ZWQgZnVuY3Rpb24gdG8gcmVqZWN0JHttc2dTdWZmaXh9YCxcbiAgICApO1xuICB9XG4gIHJldHVybiBlcnI7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMEVBQTBFO0FBQzFFLHFDQUFxQztBQUNyQyxTQUFTLGNBQWMsUUFBUSx1QkFBdUI7QUFDdEQsU0FBUyxhQUFhLFFBQVEsZ0JBQWdCO0FBb0Q5QyxPQUFPLGVBQWUsY0FDcEIsRUFBOEIsRUFDOUIsZUFHVSxFQUNWLGdCQUF5QixFQUN6QixHQUFZO0VBRVosbUNBQW1DO0VBQ25DLElBQUk7RUFDSixJQUFJO0VBQ0osSUFBSTtFQUVKLElBQUksT0FBTyxvQkFBb0IsVUFBVTtJQUN2QyxJQUNFLG9CQUFvQixhQUNwQixnQkFBZ0IsU0FBUyxZQUFZLFNBQ3JDLGdCQUFnQixTQUFTLEtBQUssTUFBTSxTQUFTLEVBQzdDO01BQ0EsYUFBYTtNQUNiLGNBQWM7SUFDaEI7RUFDRixPQUFPO0lBQ0wsTUFBTTtFQUNSO0VBQ0EsSUFBSSxZQUFZO0VBQ2hCLElBQUksb0JBQW9CO0VBQ3hCLE1BQU0sWUFBWSxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxHQUFHO0VBQ3JDLElBQUk7SUFDRixNQUFNLGtCQUFrQjtJQUN4QixJQUNFLG1CQUNBLE9BQU8sb0JBQW9CLFlBQzNCLE9BQU8sZ0JBQWdCLElBQUksS0FBSyxZQUNoQztNQUNBLG9CQUFvQjtNQUNwQixNQUFNO0lBQ1IsT0FBTztNQUNMLE1BQU0sSUFBSTtJQUNaO0VBQ0YsRUFBRSxPQUFPLE9BQU87SUFDZCxJQUFJLENBQUMsbUJBQW1CO01BQ3RCLE1BQU0sSUFBSSxlQUNSLENBQUMsdUNBQXVDLEVBQUUsVUFBVSxDQUFDO0lBRXpEO0lBQ0EsSUFBSSxZQUFZO01BQ2QsSUFBSSxDQUFDLENBQUMsaUJBQWlCLEtBQUssR0FBRztRQUM3QixNQUFNLElBQUksZUFBZSxDQUFDLCtCQUErQixFQUFFLFVBQVUsQ0FBQztNQUN4RTtNQUNBLGNBQ0UsT0FDQSxZQUNBLGFBQ0E7SUFFSjtJQUNBLE1BQU07SUFDTixZQUFZO0VBQ2Q7RUFDQSxJQUFJLENBQUMsV0FBVztJQUNkLE1BQU0sSUFBSSxlQUNSLENBQUMsMkJBQTJCLEVBQUUsVUFBVSxDQUFDO0VBRTdDO0VBQ0EsT0FBTztBQUNUIn0=
// denoCacheMetadata=8140047181590903194,8988054868453331594