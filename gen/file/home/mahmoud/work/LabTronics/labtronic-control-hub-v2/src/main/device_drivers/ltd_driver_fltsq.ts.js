import { LtdDriver } from "./ltd_driver";
import { DataType } from "../../common/models";
export class LtdDriverFloatSequence {
  static DATA_START = 3;
  protocol_version;
  driver_config;
  packet_size;
  constructor(_protocol_version, _driver_config){
    this.protocol_version = _protocol_version;
    this.driver_config = _driver_config;
    this.packet_size = 7 + _driver_config.length * 4;
  }
  encode_packet(_msg_seq_number, _msg_type, _msg_value) {
    throw new Error('Not Implemented');
  }
  decode_packet(packet) {
    // check packet size
    if (packet.length !== this.packet_size) return {
      err: 'Invalid Packet Size'
    };
    if (packet.length !== packet[2]) return {
      err: {
        msg: 'Invalid Packet Size Byte',
        detail: `packet[2]=${packet[2]}, packet.length=${packet.length}`
      }
    };
    // check packet header
    if (this.protocol_version[0] !== packet[0] || this.protocol_version[1] !== packet[1]) return {
      err: 'Invalid Version Bytes'
    };
    // check crc16
    const packet_crc16_bytes = packet.slice(packet.length - 4, packet.length - 2);
    const packet_crc16 = new Uint16Array(packet_crc16_bytes.buffer)[0];
    const computed_crc16 = LtdDriver.compute_crc16(packet.slice(0, packet.length - 4));
    if (packet_crc16 !== computed_crc16) return {
      err: {
        msg: 'Invalid CRC-16',
        detail: `packet_crc16=${packet_crc16}, computed_crc16=${computed_crc16}`
      }
    };
    // decode data payload
    const device_msg_list = [];
    const timestamp = Date.now();
    for(let i = 0; i < this.driver_config.length; i++){
      const ith_buffer_seg_offset = LtdDriverFloatSequence.DATA_START + i * 4;
      const ith_buffer_seg_end = ith_buffer_seg_offset + 4;
      const buffer_seg = packet.slice(ith_buffer_seg_offset, ith_buffer_seg_end);
      const msg_value_res = LtdDriver.bin_parse(buffer_seg, DataType.FLOAT);
      if (msg_value_res.err) return {
        err: msg_value_res.err
      };
      const msg_value = Number(msg_value_res.ok?.toFixed(2));
      const b64_msg_value = btoa(String.fromCharCode.apply(null, Array.from(buffer_seg)));
      device_msg_list.push({
        config: this.driver_config[i],
        seq_number: timestamp,
        msg_value,
        b64_msg_value
      });
    }
    return {
      ok: device_msg_list
    };
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vaG9tZS9tYWhtb3VkL3dvcmsvTGFiVHJvbmljcy9sYWJ0cm9uaWMtY29udHJvbC1odWItdjIvc3JjL21haW4vZGV2aWNlX2RyaXZlcnMvbHRkX2RyaXZlcl9mbHRzcS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMdGREcml2ZXIgfSBmcm9tIFwiLi9sdGRfZHJpdmVyXCI7XG5pbXBvcnQgeyBJTHRkRHJpdmVyIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9tb2RlbHNcIjtcbmltcG9ydCB7IE1zZ1R5cGVDb25maWcsIFJlc3VsdCwgRGV2aWNlTXNnLCBEYXRhVHlwZSB9IGZyb20gXCIuLi8uLi9jb21tb24vbW9kZWxzXCI7XG5cbmV4cG9ydCBjbGFzcyBMdGREcml2ZXJGbG9hdFNlcXVlbmNlIGltcGxlbWVudHMgSUx0ZERyaXZlciB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgREFUQV9TVEFSVCA9IDM7XG5cbiAgICBwcm90b2NvbF92ZXJzaW9uOiBbbnVtYmVyLCBudW1iZXJdO1xuICAgIGRyaXZlcl9jb25maWc6IE1zZ1R5cGVDb25maWdbXTtcbiAgICBwcml2YXRlIHBhY2tldF9zaXplOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihfcHJvdG9jb2xfdmVyc2lvbjogW251bWJlciwgbnVtYmVyXSwgX2RyaXZlcl9jb25maWc6IE1zZ1R5cGVDb25maWdbXSkge1xuICAgICAgICB0aGlzLnByb3RvY29sX3ZlcnNpb24gPSBfcHJvdG9jb2xfdmVyc2lvbjtcbiAgICAgICAgdGhpcy5kcml2ZXJfY29uZmlnID0gX2RyaXZlcl9jb25maWc7XG4gICAgICAgIHRoaXMucGFja2V0X3NpemUgPSA3ICsgX2RyaXZlcl9jb25maWcubGVuZ3RoICogNDtcbiAgICB9XG5cbiAgICBlbmNvZGVfcGFja2V0KF9tc2dfc2VxX251bWJlcjogbnVtYmVyLCBfbXNnX3R5cGU6IG51bWJlciwgX21zZ192YWx1ZTogbnVtYmVyKTogUmVzdWx0PFVpbnQ4QXJyYXk+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgSW1wbGVtZW50ZWQnKTtcbiAgICB9XG5cbiAgICBkZWNvZGVfcGFja2V0KHBhY2tldDogVWludDhBcnJheSk6IFJlc3VsdDxEZXZpY2VNc2dbXT4ge1xuICAgICAgICAvLyBjaGVjayBwYWNrZXQgc2l6ZVxuICAgICAgICBpZiAocGFja2V0Lmxlbmd0aCAhPT0gdGhpcy5wYWNrZXRfc2l6ZSlcbiAgICAgICAgICAgIHJldHVybiB7IGVycjogJ0ludmFsaWQgUGFja2V0IFNpemUnIH07XG4gICAgICAgIGlmIChwYWNrZXQubGVuZ3RoICE9PSBwYWNrZXRbMl0pXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVycjoge1xuICAgICAgICAgICAgICAgICAgICBtc2c6ICdJbnZhbGlkIFBhY2tldCBTaXplIEJ5dGUnLFxuICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IGBwYWNrZXRbMl09JHtwYWNrZXRbMl19LCBwYWNrZXQubGVuZ3RoPSR7cGFja2V0Lmxlbmd0aH1gLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgLy8gY2hlY2sgcGFja2V0IGhlYWRlclxuICAgICAgICBpZiAodGhpcy5wcm90b2NvbF92ZXJzaW9uWzBdICE9PSBwYWNrZXRbMF0gfHwgdGhpcy5wcm90b2NvbF92ZXJzaW9uWzFdICE9PSBwYWNrZXRbMV0pXG4gICAgICAgICAgICByZXR1cm4geyBlcnI6ICdJbnZhbGlkIFZlcnNpb24gQnl0ZXMnIH07XG5cbiAgICAgICAgLy8gY2hlY2sgY3JjMTZcbiAgICAgICAgY29uc3QgcGFja2V0X2NyYzE2X2J5dGVzID0gcGFja2V0LnNsaWNlKHBhY2tldC5sZW5ndGggLSA0LCBwYWNrZXQubGVuZ3RoIC0gMik7XG4gICAgICAgIGNvbnN0IHBhY2tldF9jcmMxNiA9IG5ldyBVaW50MTZBcnJheShwYWNrZXRfY3JjMTZfYnl0ZXMuYnVmZmVyKVswXTtcbiAgICAgICAgY29uc3QgY29tcHV0ZWRfY3JjMTYgPSBMdGREcml2ZXIuY29tcHV0ZV9jcmMxNihwYWNrZXQuc2xpY2UoMCwgcGFja2V0Lmxlbmd0aCAtIDQpKTtcbiAgICAgICAgaWYgKHBhY2tldF9jcmMxNiAhPT0gY29tcHV0ZWRfY3JjMTYpXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVycjoge1xuICAgICAgICAgICAgICAgICAgICBtc2c6ICdJbnZhbGlkIENSQy0xNicsXG4gICAgICAgICAgICAgICAgICAgIGRldGFpbDogYHBhY2tldF9jcmMxNj0ke3BhY2tldF9jcmMxNn0sIGNvbXB1dGVkX2NyYzE2PSR7Y29tcHV0ZWRfY3JjMTZ9YCxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIC8vIGRlY29kZSBkYXRhIHBheWxvYWRcbiAgICAgICAgY29uc3QgZGV2aWNlX21zZ19saXN0OiBEZXZpY2VNc2dbXSA9IFtdO1xuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZHJpdmVyX2NvbmZpZy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaXRoX2J1ZmZlcl9zZWdfb2Zmc2V0ID0gTHRkRHJpdmVyRmxvYXRTZXF1ZW5jZS5EQVRBX1NUQVJUICsgaSAqIDQ7XG4gICAgICAgICAgICBjb25zdCBpdGhfYnVmZmVyX3NlZ19lbmQgPSBpdGhfYnVmZmVyX3NlZ19vZmZzZXQgKyA0O1xuICAgICAgICAgICAgY29uc3QgYnVmZmVyX3NlZyA9IHBhY2tldC5zbGljZShpdGhfYnVmZmVyX3NlZ19vZmZzZXQsIGl0aF9idWZmZXJfc2VnX2VuZCk7XG4gICAgICAgICAgICBjb25zdCBtc2dfdmFsdWVfcmVzID0gTHRkRHJpdmVyLmJpbl9wYXJzZShidWZmZXJfc2VnLCBEYXRhVHlwZS5GTE9BVCk7XG4gICAgICAgICAgICBpZiAobXNnX3ZhbHVlX3Jlcy5lcnIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZXJyOiBtc2dfdmFsdWVfcmVzLmVyciB9XG4gICAgICAgICAgICBjb25zdCBtc2dfdmFsdWUgPSBOdW1iZXIobXNnX3ZhbHVlX3Jlcy5vaz8udG9GaXhlZCgyKSk7XG4gICAgICAgICAgICBjb25zdCBiNjRfbXNnX3ZhbHVlID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIEFycmF5LmZyb20oYnVmZmVyX3NlZykpKTtcbiAgICAgICAgICAgIGRldmljZV9tc2dfbGlzdC5wdXNoKHtcbiAgICAgICAgICAgICAgICBjb25maWc6IHRoaXMuZHJpdmVyX2NvbmZpZ1tpXSxcbiAgICAgICAgICAgICAgICBzZXFfbnVtYmVyOiB0aW1lc3RhbXAsXG4gICAgICAgICAgICAgICAgbXNnX3ZhbHVlLFxuICAgICAgICAgICAgICAgIGI2NF9tc2dfdmFsdWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IG9rOiBkZXZpY2VfbXNnX2xpc3QgfTtcbiAgICB9XG59OyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLFNBQVMsUUFBUSxlQUFlO0FBRXpDLFNBQTJDLFFBQVEsUUFBUSxzQkFBc0I7QUFFakYsT0FBTyxNQUFNO0VBQ1QsT0FBd0IsYUFBYSxFQUFFO0VBRXZDLGlCQUFtQztFQUNuQyxjQUErQjtFQUN2QixZQUFvQjtFQUU1QixZQUFZLGlCQUFtQyxFQUFFLGNBQStCLENBQUU7SUFDOUUsSUFBSSxDQUFDLGdCQUFnQixHQUFHO0lBQ3hCLElBQUksQ0FBQyxhQUFhLEdBQUc7SUFDckIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGVBQWUsTUFBTSxHQUFHO0VBQ25EO0VBRUEsY0FBYyxlQUF1QixFQUFFLFNBQWlCLEVBQUUsVUFBa0IsRUFBc0I7SUFDOUYsTUFBTSxJQUFJLE1BQU07RUFDcEI7RUFFQSxjQUFjLE1BQWtCLEVBQXVCO0lBQ25ELG9CQUFvQjtJQUNwQixJQUFJLE9BQU8sTUFBTSxLQUFLLElBQUksQ0FBQyxXQUFXLEVBQ2xDLE9BQU87TUFBRSxLQUFLO0lBQXNCO0lBQ3hDLElBQUksT0FBTyxNQUFNLEtBQUssTUFBTSxDQUFDLEVBQUUsRUFDM0IsT0FBTztNQUNILEtBQUs7UUFDRCxLQUFLO1FBQ0wsUUFBUSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLGdCQUFnQixFQUFFLE9BQU8sTUFBTSxDQUFDLENBQUM7TUFDcEU7SUFDSjtJQUVKLHNCQUFzQjtJQUN0QixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEtBQUssTUFBTSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxLQUFLLE1BQU0sQ0FBQyxFQUFFLEVBQ2hGLE9BQU87TUFBRSxLQUFLO0lBQXdCO0lBRTFDLGNBQWM7SUFDZCxNQUFNLHFCQUFxQixPQUFPLEtBQUssQ0FBQyxPQUFPLE1BQU0sR0FBRyxHQUFHLE9BQU8sTUFBTSxHQUFHO0lBQzNFLE1BQU0sZUFBZSxJQUFJLFlBQVksbUJBQW1CLE1BQU0sQ0FBQyxDQUFDLEVBQUU7SUFDbEUsTUFBTSxpQkFBaUIsVUFBVSxhQUFhLENBQUMsT0FBTyxLQUFLLENBQUMsR0FBRyxPQUFPLE1BQU0sR0FBRztJQUMvRSxJQUFJLGlCQUFpQixnQkFDakIsT0FBTztNQUNILEtBQUs7UUFDRCxLQUFLO1FBQ0wsUUFBUSxDQUFDLGFBQWEsRUFBRSxhQUFhLGlCQUFpQixFQUFFLGVBQWUsQ0FBQztNQUM1RTtJQUNKO0lBRUosc0JBQXNCO0lBQ3RCLE1BQU0sa0JBQStCLEVBQUU7SUFDdkMsTUFBTSxZQUFZLEtBQUssR0FBRztJQUMxQixJQUFLLElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSztNQUNoRCxNQUFNLHdCQUF3Qix1QkFBdUIsVUFBVSxHQUFHLElBQUk7TUFDdEUsTUFBTSxxQkFBcUIsd0JBQXdCO01BQ25ELE1BQU0sYUFBYSxPQUFPLEtBQUssQ0FBQyx1QkFBdUI7TUFDdkQsTUFBTSxnQkFBZ0IsVUFBVSxTQUFTLENBQUMsWUFBWSxTQUFTLEtBQUs7TUFDcEUsSUFBSSxjQUFjLEdBQUcsRUFDakIsT0FBTztRQUFFLEtBQUssY0FBYyxHQUFHO01BQUM7TUFDcEMsTUFBTSxZQUFZLE9BQU8sY0FBYyxFQUFFLEVBQUUsUUFBUTtNQUNuRCxNQUFNLGdCQUFnQixLQUFLLE9BQU8sWUFBWSxDQUFDLEtBQUssQ0FBQyxNQUFNLE1BQU0sSUFBSSxDQUFDO01BQ3RFLGdCQUFnQixJQUFJLENBQUM7UUFDakIsUUFBUSxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUU7UUFDN0IsWUFBWTtRQUNaO1FBQ0E7TUFDSjtJQUNKO0lBRUEsT0FBTztNQUFFLElBQUk7SUFBZ0I7RUFDakM7QUFDSiJ9
// denoCacheMetadata=15213415769364286735,8491476292887941208