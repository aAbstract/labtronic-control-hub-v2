// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
// This module is browser compatible.
import { AssertionError } from "./assertion_error.ts";
import { stripAnsiCode } from "jsr:@std/internal@^1.0.4/styles";

/**
 * Make an assertion that `error` is an `Error`.
 * If not then an error will be thrown.
 * An error class and a string that should be included in the
 * error message can also be asserted.
 *
 * @example Usage
 * ```ts ignore
 * import { assertIsError } from "@std/assert";
 *
 * assertIsError(null); // Throws
 * assertIsError(new RangeError("Out of range")); // Doesn't throw
 * assertIsError(new RangeError("Out of range"), SyntaxError); // Throws
 * assertIsError(new RangeError("Out of range"), SyntaxError, "Out of range"); // Doesn't throw
 * assertIsError(new RangeError("Out of range"), SyntaxError, "Within range"); // Throws
 * ```
 *
 * @typeParam E The type of the error to assert.
 * @param error The error to assert.
 * @param ErrorClass The optional error class to assert.
 * @param msgMatches The optional string or RegExp to assert in the error message.
 * @param msg The optional message to display if the assertion fails.
 */
export function assertIsError<E extends Error = Error>(
  error: unknown,
  // deno-lint-ignore no-explicit-any
  ErrorClass?: abstract new (...args: any[]) => E,
  msgMatches?: string | RegExp,
  msg?: string,
): asserts error is E {
  const msgSuffix = msg ? `: ${msg}` : ".";
  if (!(error instanceof Error)) {
    throw new AssertionError(
      `Expected "error" to be an Error object${msgSuffix}}`,
    );
  }
  if (ErrorClass && !(error instanceof ErrorClass)) {
    msg =
      `Expected error to be instance of "${ErrorClass.name}", but was "${error?.constructor?.name}"${msgSuffix}`;
    throw new AssertionError(msg);
  }
  let msgCheck;
  if (typeof msgMatches === "string") {
    msgCheck = stripAnsiCode(error.message).includes(
      stripAnsiCode(msgMatches),
    );
  }
  if (msgMatches instanceof RegExp) {
    msgCheck = msgMatches.test(stripAnsiCode(error.message));
  }

  if (msgMatches && !msgCheck) {
    msg = `Expected error message to include ${
      msgMatches instanceof RegExp
        ? msgMatches.toString()
        : JSON.stringify(msgMatches)
    }, but got ${JSON.stringify(error?.message)}${msgSuffix}`;
    throw new AssertionError(msg);
  }
}

// denoCacheMetadata={"headers":{"access-control-expose-headers":"*","x-content-type-options":"nosniff","date":"Sun, 09 Feb 2025 13:22:34 GMT","x-goog-generation":"1727173874947122","cross-origin-resource-policy":"cross-origin","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","last-modified":"Tue, 24 Sep 2024 10:31:14 GMT","via":"1.1 google","x-robots-tag":"noindex","x-guploader-uploadid":"AHMx-iGUHH2XOt_U6YTl5qiq3o6jIy_ui1_hbW7NO7MiwHY94cTIx18SEC7EVoEQKhzLsAR6LnziavQ","x-jsr-cache-status":"miss","server":"UploadServer","etag":"\"44a0645c6bb6ef816a786a721139e0d6\"","x-goog-metageneration":"1","expires":"Mon, 09 Feb 2026 13:22:34 GMT","x-goog-stored-content-encoding":"identity","x-goog-hash":"crc32c=BKaEDA==,md5=RKBkXGu274FqeGpyETng1g==","accept-ranges":"bytes","content-length":"2366","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","x-goog-storage-class":"STANDARD","x-goog-stored-content-length":"2366","content-type":"text/typescript","x-jsr-cache-id":"MRS-fea0badd","cache-control":"public, max-age=31536000, immutable","access-control-allow-origin":"*"},"url":"https://jsr.io/@std/assert/1.0.6/is_error.ts","time":1739107354}